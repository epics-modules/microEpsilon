#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBD("../../dbd/mms.dbd")
#! DBDEND


record(ai, "$(dev):dispChan1M") {
  field(DESC, "Displacement Chan1")
  field(DTYP, "asynFloat64")
  field(SCAN, "I/O Intr")
  field(INP, "@asyn($(PORT) 1 0)")
  field(PREC, "3")
}

record(longout, "$(dev):measRangeChan1C") {
  field(DESC, "Chan #1 Measuring Range")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 5 0)")
  field(PINI, "YES")
  field(DOL, "$(dev):chan1RNG.VAL CP")
  field(OMSL, "closed_loop")
}

record(longout, "$(dev):pvThrottleC") {
  field(DESC, "PV update rate from ASYN")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 9 0)")
  field(PINI, "YES")
  field(VAL, "10")
}


record(longin, "$(dev):dataPacket:goodCount") {
  field(DESC, "Data Packet Good Count")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 20 0)")
  field(SCAN, "Passive")
  field(PINI, "YES")
}


record(longin, "$(dev):dataPacket:badReadCount") {
  field(DESC, "Data Packet Bad Read Count")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 21 0)")
  field(SCAN, "Passive")
  field(PINI, "YES")
}


record(longin, "$(dev):dataPacket:badCount") {
  field(DESC, "Data Packet Bad Count")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 22 0)")
  field(SCAN, "Passive")
  field(PINI, "YES")
}


record(longin, "$(dev):dataPacket:timeoutCount") {
  field(DESC, "Data Packet Timeout Count")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 23 0)")
  field(SCAN, "Passive")
  field(PINI, "YES")
}


record(longin, "$(dev):dataPacket:outSequenceCount") {
  field(DESC, "Data Packet Out Sequence Count")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 24 0)")
  field(SCAN, "Passive")
  field(PINI, "YES")
}


record(longin, "$(dev):dataPacket:duplicateCount") {
  field(DESC, "Data Packet Duplicate Count")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 25 0)")
  field(SCAN, "Passive")
  field(PINI, "YES")
}


record(longin, "$(dev):dataPacket:missedCount") {
  field(DESC, "Data Packet Missed Count")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 26 0)")
  field(SCAN, "Passive")
  field(PINI, "YES")
}


record(longin, "$(dev):dataPacket:measuredCount") {
  field(DESC, "Data Packet Measured Count")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 27 0)")
}

record(longout, "$(dev):numMeasChans") {
  field(DESC, "PV update rate from ASYN")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 40 0)")
  field(PINI, "YES")
  field(DOL, "$(dev):chansAvail")
  field(OMSL, "closed_loop")
}

record(ai, "$(dev):dispChan2M") {
  field(DESC, "Displacement Chan1")
  field(DTYP, "asynFloat64")
  field(SCAN, "I/O Intr")
  field(INP, "@asyn($(PORT) 2 0)")
  field(PREC, "3")
}

record(longout, "$(dev):measRangeChan2C") {
  field(DESC, "Chan #1 Measuring Range")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 6 0)")
  field(PINI, "YES")
  field(DOL, "$(dev):chan2RNG.VAL CP")
  field(OMSL, "closed_loop")
}

record(ai, "$(dev):dispChan3M") {
  field(DESC, "Displacement Chan1")
  field(DTYP, "asynFloat64")
  field(SCAN, "I/O Intr")
  field(INP, "@asyn($(PORT) 3 0)")
  field(PREC, "3")
}

record(longout, "$(dev):measRangeChan3C") {
  field(DESC, "Chan #1 Measuring Range")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 7 0)")
  field(PINI, "YES")
  field(DOL, "$(dev):chan3RNG.VAL CP")
  field(OMSL, "closed_loop")
}

record(ai, "$(dev):dispChan4M") {
  field(DESC, "Displacement Chan1")
  field(DTYP, "asynFloat64")
  field(SCAN, "I/O Intr")
  field(INP, "@asyn($(PORT) 4 0)")
  field(PREC, "3")
}

record(longout, "$(dev):measRangeChan4C") {
  field(DESC, "Chan #1 Measuring Range")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 8 0)")
  field(PINI, "YES")
  field(DOL, "$(dev):chan4RNG.VAL CP")
  field(OMSL, "closed_loop")
}


record(fanout, "$(dev):dataPacket:Fanout2") {
  field(DESC, "Data Packet Scan Rate")
  field(SCAN, "Passive")
  field(SELM, "All")
  field(LNK1, "$(dev):dataPacket:outSequenceCount")
  field(LNK2, "$(dev):dataPacket:duplicateCount")
  field(LNK3, "$(dev):dataPacket:missedCount")
  field(LNK4, "$(dev):dataPacket:measuredCount")
}


record(fanout, "$(dev):dataPacket:Fanout") {
  field(DESC, "Data Packet Scan Rate")
  field(SCAN, "1 second")
  field(FLNK, "$(dev):dataPacket:Fanout2")
  field(SELM, "All")
  field(LNK1, "$(dev):dataPacket:goodCount")
  field(LNK2, "$(dev):dataPacket:badReadCount")
  field(LNK3, "$(dev):dataPacket:badCount")
  field(LNK4, "$(dev):dataPacket:timeoutCount")
}

#! Further lines contain data used by VisualDCT
#! View(0,779,1.1)
#! Record("$(dev):dispChan1M",20,374,0,0,"$(dev):dispChan1M")
#! Record("$(dev):measRangeChan1C",20,560,0,1,"$(dev):measRangeChan1C")
#! Field("$(dev):measRangeChan1C.DOL",16777215,1,"$(dev):measRangeChan1C.DOL")
#! Record("$(dev):pvThrottleC",20,774,0,1,"$(dev):pvThrottleC")
#! Record("$(dev):dataPacket:goodCount",20,954,0,1,"$(dev):dataPacket:goodCount")
#! Record("$(dev):dataPacket:badReadCount",280,954,0,1,"$(dev):dataPacket:badReadCount")
#! Record("$(dev):dataPacket:badCount",500,954,0,1,"$(dev):dataPacket:badCount")
#! Record("$(dev):dataPacket:timeoutCount",740,954,0,1,"$(dev):dataPacket:timeoutCount")
#! Record("$(dev):dataPacket:outSequenceCount",20,1254,0,1,"$(dev):dataPacket:outSequenceCount")
#! Record("$(dev):dataPacket:duplicateCount",260,1254,0,1,"$(dev):dataPacket:duplicateCount")
#! Record("$(dev):dataPacket:missedCount",500,1254,0,1,"$(dev):dataPacket:missedCount")
#! Record("$(dev):dataPacket:measuredCount",740,1254,0,1,"$(dev):dataPacket:measuredCount")
#! Record("$(dev):numMeasChans",20,1520,0,1,"$(dev):numMeasChans")
#! Field("$(dev):numMeasChans.DOL",16777215,1,"$(dev):numMeasChans.DOL")
#! Record("$(dev):dispChan2M",260,374,0,1,"$(dev):dispChan2M")
#! Record("$(dev):measRangeChan2C",260,560,0,1,"$(dev):measRangeChan2C")
#! Field("$(dev):measRangeChan2C.DOL",16777215,1,"$(dev):measRangeChan2C.DOL")
#! Record("$(dev):dispChan3M",500,374,0,1,"$(dev):dispChan3M")
#! Record("$(dev):measRangeChan3C",500,560,0,1,"$(dev):measRangeChan3C")
#! Field("$(dev):measRangeChan3C.DOL",16777215,1,"$(dev):measRangeChan3C.DOL")
#! Record("$(dev):dispChan4M",740,374,0,1,"$(dev):dispChan4M")
#! Record("$(dev):measRangeChan4C",740,560,0,1,"$(dev):measRangeChan4C")
#! Field("$(dev):measRangeChan4C.DOL",16777215,1,"$(dev):measRangeChan4C.DOL")
#! Record("$(dev):dataPacket:Fanout2",1040,1206,0,1,"$(dev):dataPacket:Fanout2")
#! Field("$(dev):dataPacket:Fanout2.LNK4",16777215,0,"$(dev):dataPacket:Fanout2.LNK4")
#! Link("$(dev):dataPacket:Fanout2.LNK4","$(dev):dataPacket:measuredCount")
#! Field("$(dev):dataPacket:Fanout2.LNK3",16777215,0,"$(dev):dataPacket:Fanout2.LNK3")
#! Link("$(dev):dataPacket:Fanout2.LNK3","$(dev):dataPacket:missedCount")
#! Field("$(dev):dataPacket:Fanout2.LNK2",16777215,0,"$(dev):dataPacket:Fanout2.LNK2")
#! Link("$(dev):dataPacket:Fanout2.LNK2","$(dev):dataPacket:duplicateCount")
#! Field("$(dev):dataPacket:Fanout2.LNK1",16777215,0,"$(dev):dataPacket:Fanout2.LNK1")
#! Link("$(dev):dataPacket:Fanout2.LNK1","$(dev):dataPacket:outSequenceCount")
#! Record("$(dev):dataPacket:Fanout",1000,891,0,1,"$(dev):dataPacket:Fanout")
#! Field("$(dev):dataPacket:Fanout.FLNK",16777215,1,"$(dev):dataPacket:Fanout.FLNK")
#! Link("$(dev):dataPacket:Fanout.FLNK","$(dev):dataPacket:Fanout2")
#! Field("$(dev):dataPacket:Fanout.LNK4",16777215,0,"$(dev):dataPacket:Fanout.LNK4")
#! Link("$(dev):dataPacket:Fanout.LNK4","$(dev):dataPacket:timeoutCount")
#! Field("$(dev):dataPacket:Fanout.LNK3",16777215,0,"$(dev):dataPacket:Fanout.LNK3")
#! Link("$(dev):dataPacket:Fanout.LNK3","$(dev):dataPacket:badCount")
#! Field("$(dev):dataPacket:Fanout.LNK2",16777215,0,"$(dev):dataPacket:Fanout.LNK2")
#! Link("$(dev):dataPacket:Fanout.LNK2","$(dev):dataPacket:badReadCount")
#! Field("$(dev):dataPacket:Fanout.LNK1",16777215,0,"$(dev):dataPacket:Fanout.LNK1")
#! Link("$(dev):dataPacket:Fanout.LNK1","$(dev):dataPacket:goodCount")
